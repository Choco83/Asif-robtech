// Copyright (c) 2015-2016, The University of Texas at Austin
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
// 
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
// 
//     * Neither the name of the copyright holder nor the names of its
//       contributors may be used to endorse or promote products derived from
//       this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/** @file keyboard_reader.h
 * 
 *  @author karl.kruusamae(at)utexas.edu
 * 
 *  NOTE: If you get permission denied when starting this node. Use ' ls -l /dev/input/event* ' to learn which group can access the events.
 *        Then add your username to this group with ' sudo usermod -a -G group_name user_name '
 */

#include <linux/input.h>
#include <string.h>
#include <map>
#include <vector>
#include <errno.h>
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <glob.h>	// for counting files in a dir (needed for counting event files in /dev/input)
#include <sstream>

#ifndef MOUSE_READER_H
#define MOUSE_READER_H

class Mouse
{
public:
  // Constructor
  Mouse (std::string mouse_event_path)
  {
    if ( mouse_event_path.empty() )
    {
      // try to find a suitable event file from the files available on the system
      descriptor_ = findMouse();
    }
    else
    {
      //try to open user-specified event file as a keyboard
      descriptor_ = openMouse( mouse_event_path.c_str() );
    }
  };
  
  /** Goes through all the event files in /dev/input/ to locate a keyboard.
   *  @return file descriptor if all checks out; -1 otherwise.
   */
  int findMouse();

  /** Opens the input device and checks whether its meaningful name (ie, EVIOCGNAME in ioctl()) contains substrings specified in valid_substring.
   *  @param device_path file path of a linux event.
   *  @return file descriptor if open and other checks have been succesfully passed; -1 otherwise.
   */
  int openMouse(const char *device_path);

  /** Closes the device specificed by descriptor_. */
  void closeMouse();

  /** Checks if the keyboard event file has been succesfully opened.
   *  @return TRUE when descriptor_ is not negative, FALSE otherwise.
   */
  bool isReadable();

  /** Searches the input event for type EV_KEY and returns event code (ie, which key) and value (ie, pressed or depressed).
   *  @param ev input event.
   *  @return vector containing two unsigned integers: event code (based on linux/input.h) and event value (1 for pressed, 0 for depressed); returns {0, 0} if no EV_KEY.
   */
  std::vector <uint16_t> processEvent( struct input_event *ev );

  /** Reads event data, and returns relevant info only for EV_KEY events, and dismisses anything that is not a key being pressed or depressed.
   *  @param fd file descriptor for keyboard event file.
   *  @return vector containing two unsigned integers: event code (based on linux/input.h) and event value (1 for pressed, 0 for depressed).
   */
  std::vector <uint16_t> getKeyEvent();

  /** Return a string corresponding to a key code.
   *  @param key_code uint corresponding to key on a keyboard
   *  @return string corresponding to a key code
   */
  std::string getKeyName( uint16_t key_code );


private:
  /** File descriptor of the working keyboard event file. */
  int descriptor_;

  /** A list of substrings that would indicate that a device is keyboard. */
  std::vector<std::string> valid_substrings =
  {
    "mouse",
    "Mouse"
  };
  
  /** Map key event code to key event string. */
  std::map<uint16_t, std::string> keymap_ =
  {
    {KEY_RESERVED, "Reserved"}, {REL_X, "XRel"},
    {REL_WHEEL, "WheelRel"}, {REL_Y, "YRel"},
    {BTN_LEFT, "LeftBtn"}, {BTN_RIGHT, "RightBtn"},
    {BTN_MIDDLE, "MiddleBtn"},  {BTN_SIDE, "SideBtn"},
    {BTN_EXTRA, "ExtraBtn"},  {BTN_FORWARD, "ForwardBtn"},
    {BTN_BACK, "BackBtn"}, {BTN_TASK, "TaskBtn"},
    {BTN_TRIGGER, "Trigger"},  {BTN_THUMB, "ThumbBtn"},
    {BTN_THUMB2, "ThumbBtn2"},  {BTN_TOP, "TopBtn"},
    {BTN_TOP2, "TopBtn2"}, {BTN_PINKIE, "PinkieBtn"},
    {BTN_BASE, "BaseBtn"}, {BTN_BASE2, "BaseBtn2"},
    {BTN_BASE3, "BaseBtn3"},  {BTN_BASE4, "BaseBtn4"},
    {BTN_BASE5, "BaseBtn5"},  {BTN_BASE6, "BaseBtn6"},
    {BTN_DEAD, "BtnDead"}, {BTN_A, "BtnA"},
    {BTN_B, "BtnB"}, {BTN_C, "BtnC"},
    {BTN_X, "BtnX"}, {BTN_Y, "BtnY"},
    {BTN_Z, "BtnZ"}, {BTN_TL, "BtnTL"},
    {BTN_TR, "BtnTR"}, {BTN_TL2, "BtnTL2"},
    {BTN_TR2, "BtnTR2"}, {BTN_SELECT, "BtnSelect"},
    {BTN_START, "BtnStart"},  {BTN_MODE, "BtnMode"},
    {BTN_THUMBL, "BtnThumbL"},  {BTN_THUMBR, "BtnThumbR"},
    {BTN_TOOL_PEN, "ToolPen"},  {BTN_TOOL_RUBBER, "ToolRubber"},
    {BTN_TOOL_BRUSH, "ToolBrush"},  {BTN_TOOL_PENCIL, "ToolPencil"},
    {BTN_TOOL_AIRBRUSH, "ToolAirbrush"}, {BTN_TOOL_FINGER, "ToolFinger"},
    {BTN_TOOL_MOUSE, "ToolMouse"},  {BTN_TOOL_LENS, "ToolLens"},
    {BTN_TOUCH, "Touch"}, {BTN_STYLUS, "Stylus"},
    {BTN_STYLUS2, "Stylus2"},  {BTN_TOOL_DOUBLETAP, "Tool Doubletap"},
    {BTN_TOOL_TRIPLETAP, "Tool Tripletap"}, {BTN_GEAR_DOWN, "WheelBtn"},
    {BTN_GEAR_UP, "Gear up"},  {KEY_OK, "Ok"},
    {KEY_SELECT, "Select"},  {KEY_GOTO, "Goto"},
    {KEY_CLEAR, "Clear"}, {KEY_POWER2, "Power2"},
    {KEY_OPTION, "Option"},  {KEY_INFO, "Info"},
    {KEY_TIME, "Time"}, {KEY_VENDOR, "Vendor"},
    {KEY_ARCHIVE, "Archive"},  {KEY_PROGRAM, "Program"},
    {KEY_CHANNEL, "Channel"},  {KEY_FAVORITES, "Favorites"},
    {KEY_EPG, "EPG"}, {KEY_PVR, "PVR"},
    {KEY_MHP, "MHP"}, {KEY_LANGUAGE, "Language"},
    {KEY_TITLE, "Title"}, {KEY_SUBTITLE, "Subtitle"},
    {KEY_ANGLE, "Angle"}, {KEY_ZOOM, "Zoom"},
    {KEY_MODE, "Mode"}, {KEY_KEYBOARD, "Keyboard"},
    {KEY_SCREEN, "Screen"},  {KEY_PC, "PC"},
    {KEY_TV, "TV"}, {KEY_TV2, "TV2"},
    {KEY_VCR, "VCR"}, {KEY_VCR2, "VCR2"},
    {KEY_SAT, "Sat"}, {KEY_SAT2, "Sat2"},
    {KEY_CD, "CD"}, {KEY_TAPE, "Tape"},
    {KEY_RADIO, "Radio"}, {KEY_TUNER, "Tuner"},
    {KEY_PLAYER, "Player"},  {KEY_TEXT, "Text"},
    {KEY_DVD, "DVD"}, {KEY_AUX, "Aux"},
    {KEY_MP3, "MP3"}, {KEY_AUDIO, "Audio"},
    {KEY_VIDEO, "Video"}, {KEY_DIRECTORY, "Directory"},
    {KEY_LIST, "List"}, {KEY_MEMO, "Memo"},
    {KEY_CALENDAR, "Calendar"},  {KEY_RED, "Red"},
    {KEY_GREEN, "Green"}, {KEY_YELLOW, "Yellow"},
    {KEY_BLUE, "Blue"}, {KEY_CHANNELUP, "ChannelUp"},
    {KEY_CHANNELDOWN, "ChannelDown"}, {KEY_FIRST, "First"},
    {KEY_LAST, "Last"}, {KEY_AB, "AB"},
    {KEY_NEXT, "Next"}, {KEY_RESTART, "Restart"},
    {KEY_SLOW, "Slow"}, {KEY_SHUFFLE, "Shuffle"},
    {KEY_BREAK, "Break"}, {KEY_PREVIOUS, "Previous"},
    {KEY_DIGITS, "Digits"},  {KEY_TEEN, "TEEN"},
    {KEY_TWEN, "TWEN"}, {KEY_DEL_EOL, "Delete EOL"},
    {KEY_DEL_EOS, "Delete EOS"},  {KEY_INS_LINE, "Insert line"},
    {KEY_DEL_LINE, "Delete line"}
  };

}; // end class Keyboard

#endif
